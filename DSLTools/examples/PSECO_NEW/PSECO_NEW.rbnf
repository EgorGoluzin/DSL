TERMINALS:
    exprtext      ::= '\$[^\$]*\$';
    commenttext   ::= '\s*//[^\n]*';
    name          ::= '[A-Za-z_][A-Za-z0-9_]*';
    number        ::= '[0-9]+';
    symbol        ::= '[:=#;(){}\[\]|.,<>+^]';
    text          ::= '"[^"]*"';
    whitespace    ::= '\s+';
    programname   ::= '"[^"]*\n"';

KEYS:
    'IF';
    'THEN';
    'ELSE';
    'ELSEIF';
    'END_IF';
    'FOR';
    'DO';
    'END_FOR';
    'REPEAT';
    'UNTIL';
    'WHILE';
    'END_WHILE';
    'FUNC';
    'END_FUNC';
    'PROC';
    'END_PROC';
    'ITER';
    'END_ITER';
    'INPUT';
    'OUTPUT';
    'GOTO';
    'ARRAY';
    'STRUCT';
    'SELECT';
    'YIELD';
    'RETURN';
    'NEXT';
    'FROM';
    'TO';
    'IN';
    'OF';
    '(';
    ')';
    ',';
    '=';

NONTERMINALS:
    Program; Block; Expression; FuncCall; Arguments; Parameters;
    Range; Set; Variable; Identifier; Number; Text; Assignment;
    Conditional; Loop; LC; LA; LB; LS; FuncDecl; ProcDecl; IterDecl;
    Input; Output; Comment; Goto; ArrayDecl; StructDecl; FieldDecl;
    Select; Yield; Return; NextFor;

AXIOM:
    Program

RULES:
    Program        ::= programname { Block };
    Block          ::= Assignment | Conditional | Expression | Loop | FuncCall | FuncDecl | ProcDecl | IterDecl | Input | Output | Comment | Goto | ArrayDecl | StructDecl | Select | Return | Yield | NextFor;
    Expression     ::= exprtext;
    FuncCall       ::= Identifier '(' [ Arguments ] ')';
    Arguments      ::= Expression { ',' Expression };
    Parameters     ::= Variable { ',' Variable };
    Range          ::= 'FROM' Number 'TO' Number;
    Set            ::= Identifier | Range;
    Variable       ::= Identifier;
    Identifier     ::= name | exprtext;
    Number         ::= number;
    Text           ::= text;
    Assignment     ::= Variable '=' Expression;
    Conditional    ::= 'IF' Expression 'THEN' Block [ { 'ELSEIF' Expression 'THEN' Block } ] [ 'ELSE' Block ] 'END_IF';
    Loop           ::= LC | LA | LB | LS;
    LC             ::= 'FOR' Variable Range 'DO' Block 'END_FOR';
    LA             ::= 'REPEAT' Block 'UNTIL' Expression;
    LB             ::= 'WHILE' Expression 'DO' Block 'END_WHILE';
    LS             ::= 'FOR' Variable 'IN' Set 'DO' Block 'END_FOR';
    FuncDecl       ::= 'FUNC' Identifier '(' [ Parameters ] ')' Block Return 'END_FUNC';
    ProcDecl       ::= 'PROC' Identifier '(' [ Parameters ] ')' Block 'END_PROC';
    IterDecl       ::= 'ITER' Identifier '(' [ Parameters ] ')' Block Yield 'END_ITER';
    Input          ::= 'INPUT' Expression;
    Output         ::= 'OUTPUT' Expression;
    Comment        ::= commenttext;
    Goto           ::= 'GOTO' Identifier;
    ArrayDecl      ::= 'ARRAY' Expression 'OF' Identifier | 'ARRAY' Expression 'OF' Expression;
    StructDecl     ::= 'STRUCT' Identifier '{' { FieldDecl } '}';
    FieldDecl      ::= Identifier ':' Identifier | Identifier ':' Statement;
    Select         ::= 'SELECT' Variable 'IN' Set;
    Yield          ::= 'YIELD' Expression;
    Return         ::= 'RETURN' Expression;
    NextFor        ::= 'NEXT' 'FOR' Variable;
