TERMINALS:
    nonterminal_name ::= '\''[A-Za-z_][A-Za-z0-9_]*\'';
    terminal_name ::= '[A-Za-z_][A-Za-z0-9_]*';
    regular_expression   ::= '\'(\\.|[^\\\'])*\'';
    ebnf_symbol        ::= '[::=#;(){}\[\]|.]';
    whitespace    ::= '\s+'.

KEYS:
    'TERMINALS'; 'KEYS'; 'NONTERMINALS'; 'AXIOM'; 'RULES'; 'ERRORS'; ':'.

NONTERMINALS:
    Grammar; TerminalsBlock; KeysBlock; NonterminalsBlock;
    AxiomBlock; RulesBlock; Rule; Rhs; Element; Group; Optional; Iteration.

AXIOM: Grammar.

RULES:
    Grammar          ::= TerminalsBlock KeysBlock NonterminalsBlock AxiomBlock RulesBlock;
    TerminalsBlock   ::= 'TERMINALS' ':' (Terminal)+;
    KeysBlock        ::= 'KEYS' ':' ('\'' ebnf_symbol '\'' ';')+;
    NonterminalsBlock::= 'NONTERMINALS' ':' (NonTerminalName ';')+;
    AxiomBlock       ::= 'AXIOM' ':' NonTerminalName ';';
    Terminal         ::= TerminalName '::=' RegularExpression ';'
    TerminalName    ::= terminal_name;
    NonTerminalName    ::= nonterminal_name;
    RegularExpression  ::= regular_expression;
    RulesBlock       ::= 'RULES' ':' (Rule ';')+;
    Rule             ::= NonTerminalName '::=' Rhs;
    Rhs              ::= Sequence;
    Sequence         ::= (RuleElement)+;
    RuleElement      ::= NonTerminalName | TerminalName | Group | Optional | Iteration | Alternative;
    Group            ::= '(' Sequence | RuleElement ')';
    Optional         ::= '[' Sequence | RuleElement ']';
    Iteration        ::= '{' Sequence | RuleElement ['#' name] '}';
    Alternative      ::= (Sequence | RuleElement) '|' (Sequence | RuleElement) {'|' (Sequence | RuleElement)};