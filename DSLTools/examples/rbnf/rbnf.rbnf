TERMINALS:
    name ::= '[A-Za-z_][A-Za-z0-9_]*';
    key_name ::= '\'[^\']*\'';
    regular_expression   ::= '[^\\']*(\\.[^\\']*)*';
    ebnf_symbol        ::= '[::=#;(){}\[\]|.]';
    whitespace    ::= '\s+'.

KEYS:
    'TERMINALS'; 'KEYS'; 'NONTERMINALS'; 'AXIOM'; 'RULES'; 'ERRORS';
    ':'; ';'; '::='; '#'; '('; ')' '[' ; ']'; '{' ; '}'; '|'; '.'.

NONTERMINALS:
    Grammar; TerminalsBlock; KeysBlock; NonterminalsBlock;
    AxiomBlock; RulesBlock; Rule; Element; Group; Optional; Iteration.

AXIOM: Grammar.

RULES:
    Grammar          ::= TerminalsBlock KeysBlock NonterminalsBlock AxiomBlock RulesBlock;
    TerminalsBlock   ::= 'TERMINALS' ':' {Terminal # ';'} '.';
    KeysBlock        ::= 'KEYS' ':' {key_name # ';'} '.';
    NonterminalsBlock::= 'NONTERMINALS' ':' {name # ';'} '.';
    AxiomBlock       ::= 'AXIOM' ':' name '.';
    Terminal         ::= name '::=' regular_expression;
    RulesBlock       ::= 'RULES' ':' {Rule # ';'} '.';
    Rule             ::= name '::=' Sequence;
    Sequence         ::= RuleElement { [ RuleElement ] };
    RuleElement      ::= Element | Group | Optional | Iteration | Alternative;
    Element          ::= name | key_name;
    Group            ::= '(' Sequence ')';
    Optional         ::= '[' Sequence ']';
    Iteration        ::= '{' Sequence ['#' key_name'] }';
    Alternative      ::= {RuleElement # '|'}.